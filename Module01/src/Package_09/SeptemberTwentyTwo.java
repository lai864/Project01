package Package_09;
/*包的概述和使用
*   其实就是文件
*   作用：对类进行分类管理
*
* 包的定义格式
*   格式：package包名（多级包用.分开）
*   范例：package com.itheima;*/



/*导包的格式
*   格式：import包名
*   范例：import cn.itcast.Teacher
*   范例：import Package_09.Teacher*/


/*权限修饰符
*   修饰符     同一个类中         同一个包中子类无关类     不同包的子类     不同包的无关类
*   private     可以
*   默认         可以                可以
*   protected    可以                 可以              可以
*   public      可以                  可以              可以              可以*/


/*修饰符
*   final
* final关键字是最终的意思，可以修饰成员方法，成员变量，类
*
* final修饰的特点
*   修饰方法：表明方法是最终方法，不能被重写
*   修饰变量：表明该变量是常量，不能再次被赋值
*   修饰类：表明该类是最终类，不能被继承*/

/*final修饰局部变量
*   变量是基本类型：final修饰指的是基本类型的数据值不能发生改变
*   变量是引用类型：final修饰指的是引用类型的地址值不能发生改变，但地址里的内容是可以发生改变的*/


/*static
*   static关键字是静态的意思，可以修饰成员方法，成员变量
*
*   static修饰的特点
*       被类的所有对象共享
*           这也是我们判断是否使用静态关键字的条件
*       可以通过类名调用
*           当然也可以通过对象名调用
*           推荐使用类名调用*/



/*static访问特点
 * 非静态的成员方法
 *   能访问静态的成员变量
 *   能访问静态的成员方法
 *   能访问静态的非静态成员变量
 *   能访问非静态的成员方法
 *
 * 静态的成员方法
 *   能访问静态的成员变量
 *   能访问静态的成员方法
 * 总结一句话就是：静态成员方法只能访问静态成员*/



/*多态概述
*   同一个对象，在不同时刻表现出来的不同形态
*
* 举例：猫
* 我们可以说猫是猫：猫cat=new猫()
* 我们也可以说猫是动物：动物animal=new猫();
* 这里猫在不同时刻表现出了不同的形态，这就是多态
*
* 多态的前提和体现
*   有继承/实现关系
*   有方法重写
*   有父类引用指向子类对象*/



/*多态中成员访问特点
 * 成员变量：编译看左边，执行看左边
 * 成员方法：编译看左边，执行看右边
 *
 * 为什么成员变量和成员方法的访问不一样呢？
 * 因为成员方法有重写，而成员变量没有*/



/*多态的好处和弊端
 *   多态的好处：提高了程序的扩展性
 * 具体体现：定义方法的时候，使用父类型作为参数，将来在使用的时候，使用具体的子类型参与操作
 *   多态的弊端：不能使用子类的特有功能*/
public class SeptemberTwentyTwo {

}
